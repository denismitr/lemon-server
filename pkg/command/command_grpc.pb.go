// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReceiverClient is the client API for Receiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiverClient interface {
	BatchUpsert(ctx context.Context, in *BatchUpsertRequest, opts ...grpc.CallOption) (*ExecuteResult, error)
	BatchInsert(ctx context.Context, in *BatchInsertRequest, opts ...grpc.CallOption) (*ExecuteResult, error)
	BatchDeleteByKey(ctx context.Context, in *BatchDeleteByKeyRequest, opts ...grpc.CallOption) (*ExecuteResult, error)
	MGet(ctx context.Context, in *MultiGetQueryRequest, opts ...grpc.CallOption) (*QueryResult, error)
	PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
}

type receiverClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverClient(cc grpc.ClientConnInterface) ReceiverClient {
	return &receiverClient{cc}
}

func (c *receiverClient) BatchUpsert(ctx context.Context, in *BatchUpsertRequest, opts ...grpc.CallOption) (*ExecuteResult, error) {
	out := new(ExecuteResult)
	err := c.cc.Invoke(ctx, "/command.Receiver/BatchUpsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverClient) BatchInsert(ctx context.Context, in *BatchInsertRequest, opts ...grpc.CallOption) (*ExecuteResult, error) {
	out := new(ExecuteResult)
	err := c.cc.Invoke(ctx, "/command.Receiver/BatchInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverClient) BatchDeleteByKey(ctx context.Context, in *BatchDeleteByKeyRequest, opts ...grpc.CallOption) (*ExecuteResult, error) {
	out := new(ExecuteResult)
	err := c.cc.Invoke(ctx, "/command.Receiver/BatchDeleteByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverClient) MGet(ctx context.Context, in *MultiGetQueryRequest, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, "/command.Receiver/MGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverClient) PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/command.Receiver/PingPong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServer is the server API for Receiver service.
// All implementations should embed UnimplementedReceiverServer
// for forward compatibility
type ReceiverServer interface {
	BatchUpsert(context.Context, *BatchUpsertRequest) (*ExecuteResult, error)
	BatchInsert(context.Context, *BatchInsertRequest) (*ExecuteResult, error)
	BatchDeleteByKey(context.Context, *BatchDeleteByKeyRequest) (*ExecuteResult, error)
	MGet(context.Context, *MultiGetQueryRequest) (*QueryResult, error)
	PingPong(context.Context, *Ping) (*Pong, error)
}

// UnimplementedReceiverServer should be embedded to have forward compatible implementations.
type UnimplementedReceiverServer struct {
}

func (UnimplementedReceiverServer) BatchUpsert(context.Context, *BatchUpsertRequest) (*ExecuteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsert not implemented")
}
func (UnimplementedReceiverServer) BatchInsert(context.Context, *BatchInsertRequest) (*ExecuteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsert not implemented")
}
func (UnimplementedReceiverServer) BatchDeleteByKey(context.Context, *BatchDeleteByKeyRequest) (*ExecuteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteByKey not implemented")
}
func (UnimplementedReceiverServer) MGet(context.Context, *MultiGetQueryRequest) (*QueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGet not implemented")
}
func (UnimplementedReceiverServer) PingPong(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}

// UnsafeReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServer will
// result in compilation errors.
type UnsafeReceiverServer interface {
	mustEmbedUnimplementedReceiverServer()
}

func RegisterReceiverServer(s grpc.ServiceRegistrar, srv ReceiverServer) {
	s.RegisterService(&Receiver_ServiceDesc, srv)
}

func _Receiver_BatchUpsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).BatchUpsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Receiver/BatchUpsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).BatchUpsert(ctx, req.(*BatchUpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receiver_BatchInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).BatchInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Receiver/BatchInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).BatchInsert(ctx, req.(*BatchInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receiver_BatchDeleteByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).BatchDeleteByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Receiver/BatchDeleteByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).BatchDeleteByKey(ctx, req.(*BatchDeleteByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receiver_MGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiGetQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).MGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Receiver/MGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).MGet(ctx, req.(*MultiGetQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receiver_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Receiver/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).PingPong(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

// Receiver_ServiceDesc is the grpc.ServiceDesc for Receiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Receiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.Receiver",
	HandlerType: (*ReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchUpsert",
			Handler:    _Receiver_BatchUpsert_Handler,
		},
		{
			MethodName: "BatchInsert",
			Handler:    _Receiver_BatchInsert_Handler,
		},
		{
			MethodName: "BatchDeleteByKey",
			Handler:    _Receiver_BatchDeleteByKey_Handler,
		},
		{
			MethodName: "MGet",
			Handler:    _Receiver_MGet_Handler,
		},
		{
			MethodName: "PingPong",
			Handler:    _Receiver_PingPong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/command/command.proto",
}
